// Code generated by MockGen. DO NOT EDIT.
// Source: user.go
//
// Generated by this command:
//
//	mockgen -source=user.go -destination=mock_user.go -package=service -typed
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
	isgomock struct{}
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserService) CreateUser(ctx context.Context, username, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, username, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserServiceMockRecorder) CreateUser(ctx, username, password any) *MockUserServiceCreateUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserService)(nil).CreateUser), ctx, username, password)
	return &MockUserServiceCreateUserCall{Call: call}
}

// MockUserServiceCreateUserCall wrap *gomock.Call
type MockUserServiceCreateUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserServiceCreateUserCall) Return(arg0 error) *MockUserServiceCreateUserCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserServiceCreateUserCall) Do(f func(context.Context, string, string) error) *MockUserServiceCreateUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserServiceCreateUserCall) DoAndReturn(f func(context.Context, string, string) error) *MockUserServiceCreateUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GenerateToken mocks base method.
func (m *MockUserService) GenerateToken(ctx context.Context, username, TokenType string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", ctx, username, TokenType)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockUserServiceMockRecorder) GenerateToken(ctx, username, TokenType any) *MockUserServiceGenerateTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockUserService)(nil).GenerateToken), ctx, username, TokenType)
	return &MockUserServiceGenerateTokenCall{Call: call}
}

// MockUserServiceGenerateTokenCall wrap *gomock.Call
type MockUserServiceGenerateTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserServiceGenerateTokenCall) Return(arg0 string, arg1 error) *MockUserServiceGenerateTokenCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserServiceGenerateTokenCall) Do(f func(context.Context, string, string) (string, error)) *MockUserServiceGenerateTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserServiceGenerateTokenCall) DoAndReturn(f func(context.Context, string, string) (string, error)) *MockUserServiceGenerateTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RefreshToken mocks base method.
func (m *MockUserService) RefreshToken(ctx context.Context, token string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", ctx, token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockUserServiceMockRecorder) RefreshToken(ctx, token any) *MockUserServiceRefreshTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockUserService)(nil).RefreshToken), ctx, token)
	return &MockUserServiceRefreshTokenCall{Call: call}
}

// MockUserServiceRefreshTokenCall wrap *gomock.Call
type MockUserServiceRefreshTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserServiceRefreshTokenCall) Return(arg0 string, arg1 error) *MockUserServiceRefreshTokenCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserServiceRefreshTokenCall) Do(f func(context.Context, string) (string, error)) *MockUserServiceRefreshTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserServiceRefreshTokenCall) DoAndReturn(f func(context.Context, string) (string, error)) *MockUserServiceRefreshTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ValidateCredentials mocks base method.
func (m *MockUserService) ValidateCredentials(ctx context.Context, username, password string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateCredentials", ctx, username, password)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateCredentials indicates an expected call of ValidateCredentials.
func (mr *MockUserServiceMockRecorder) ValidateCredentials(ctx, username, password any) *MockUserServiceValidateCredentialsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateCredentials", reflect.TypeOf((*MockUserService)(nil).ValidateCredentials), ctx, username, password)
	return &MockUserServiceValidateCredentialsCall{Call: call}
}

// MockUserServiceValidateCredentialsCall wrap *gomock.Call
type MockUserServiceValidateCredentialsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserServiceValidateCredentialsCall) Return(arg0 bool, arg1 error) *MockUserServiceValidateCredentialsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserServiceValidateCredentialsCall) Do(f func(context.Context, string, string) (bool, error)) *MockUserServiceValidateCredentialsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserServiceValidateCredentialsCall) DoAndReturn(f func(context.Context, string, string) (bool, error)) *MockUserServiceValidateCredentialsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockUserStore is a mock of UserStore interface.
type MockUserStore struct {
	ctrl     *gomock.Controller
	recorder *MockUserStoreMockRecorder
	isgomock struct{}
}

// MockUserStoreMockRecorder is the mock recorder for MockUserStore.
type MockUserStoreMockRecorder struct {
	mock *MockUserStore
}

// NewMockUserStore creates a new mock instance.
func NewMockUserStore(ctrl *gomock.Controller) *MockUserStore {
	mock := &MockUserStore{ctrl: ctrl}
	mock.recorder = &MockUserStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserStore) EXPECT() *MockUserStoreMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockUserStore) Get(ctx context.Context, username string) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, username)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUserStoreMockRecorder) Get(ctx, username any) *MockUserStoreGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserStore)(nil).Get), ctx, username)
	return &MockUserStoreGetCall{Call: call}
}

// MockUserStoreGetCall wrap *gomock.Call
type MockUserStoreGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserStoreGetCall) Return(arg0 *User, arg1 error) *MockUserStoreGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserStoreGetCall) Do(f func(context.Context, string) (*User, error)) *MockUserStoreGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserStoreGetCall) DoAndReturn(f func(context.Context, string) (*User, error)) *MockUserStoreGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Store mocks base method.
func (m *MockUserStore) Store(ctx context.Context, user User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockUserStoreMockRecorder) Store(ctx, user any) *MockUserStoreStoreCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockUserStore)(nil).Store), ctx, user)
	return &MockUserStoreStoreCall{Call: call}
}

// MockUserStoreStoreCall wrap *gomock.Call
type MockUserStoreStoreCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserStoreStoreCall) Return(arg0 error) *MockUserStoreStoreCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserStoreStoreCall) Do(f func(context.Context, User) error) *MockUserStoreStoreCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserStoreStoreCall) DoAndReturn(f func(context.Context, User) error) *MockUserStoreStoreCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
